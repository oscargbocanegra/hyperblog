git init // comando para iniciar un proyecto
git config--list // Comando para validar la configuracion del entorno
git config --global user.name "Nombre" // Comando para configurar el nombre del usuario 
git config --global user.mail "correo@electronico" // Comando para configurar el correo electronico
git status // Comando para revisar los cambios en los archivos
git add {archivo} // comando para adjuntar un archivo al area temporal stagin
git add . // comando para adjuntar varios archivos
git commit -m "comentario" //Comando para enviar el cambio al repositorio .git -m para agregar comentario
git log {archivo} //Comando para revisar las versiones del archivo
git show // muestra los cambios que han existido sobre un archivo
git diff {sha commit1} {sha commit2} //Comando para validar la diferencia en tre versiones

Clase 12
git reset {sha commit2} --hard // regresa al estado seleccionado en el sha sin retorno 
git log --stat // visualiza los cambios realizados en cada comit desde la opcion de log.
git checkout {sha commit} {nombre archivo} // comando para regresar en la linea de tiempo a la version del archivo.
git checkout {master} {nombre archivo} // comando para devolver el cambio anterior a la version ultima master

Clase 13
git rm // permite eliminar arhchivos de git sin eliminar el historial del sistema de versiones.
git rm --cached: // Elimina los archivos del área de Staging y del próximo commit pero los mantiene en nuestro disco duro.
git rm --force: //Elimina los archivos de Git y del disco duro.
git reset // volvemos al pasado sin la posibilidad de volver al futuro. Borramos la historia y la debemos sobreescribir. No hay vuelta atrás.
git reset --hard // borra toda la información que tengamos en el área de staging (y perdiendo todo para siempre).
git reset --soft // mantiene allí los archivos del área de staging para que podamos aplicar nuestros últimos cambios pero desde un commit anterior.
git reset HEAD // mueve los cambios de Staging a Unstaged. Seguiremos teniendo los últimos cambios del archivo, el repositorio mantendrá el archivo.

Clase 14.
git clone url / comando para clonar un repositorio dede un servidor remoto cuando se trabaja con equipos.
git push / comando para enviar al repositorio remoto.
git fetch / comando para descargar un repositorio remoto a uno local
git merge / permite fusionar la informacion del repositorio local con el directorio de trabajo.
git pull / comando que une las funcioes de (fetch y merge) clona el repositorio remoto en local y directorio de trabajo.

clase 15.
Ramas / Permiten hacer cambios sin afectar los flujos de cambio.
master / rama princiapal normalnete es produccion.
git status / comando para ver donde estamos ubicados.
git branch {nombre rama} // comando para crecar una rama   
git checkout (nombre ramma) // comando que permite movernos entre ramas creadas.

Clae 16
git branch / comando para validar la cantidad de ramas que podemos tener.
git merge {rama} / comando para fusionar las ramas, nos ubicamos en la rama que debe contener el cambio e invocamos la rama que tiene los nuevos cambios.

Clase 20 
git config -l // comando que nos permite ver como esta configurado git.
ssh-keygen -t rsa -b 4096 -C "oscargiovanni@gmail.com" // Comando para crear una llave publica y privada.  
eval $(ssh-agent -s) // comando para identificar que esta corriendo el servidor de ssh.
ssh-add ruta-donde-guardaste-tu-llave-privada // comando para añadir la llave privada al servidor ssh.
git remote set-url origin url-ssh-del-repositorio-en-github // Comando para actualizar la URL que guardamos en nuestro repositorio remoto, ahora usamos la URL con SSH:

clase 22
git log --all --graph --decorate --oneline // comando para mostrar la historia del proyecto comprimida.
alias {noombre asignado}  "git log --all --graph --decorate --oneline" // comando para crear un alias que contiene todo un comando.
git tag -a -m "" nombre-del-tag id-del-commit. // Crear un nuevo tag y asignarlo a un commit
git tag -d nombre-del-tag. // Borrar un tag en el repositorio local
git tag o git show-ref --tags. // Listar los tags de nuestro repositorio local
git push origin --tags. // Publicar un tag en el repositorio remoto
 git tag -d nombre-del-tag y git push origin :refs/tags/nombre-del-tag. // Borrar un tag del repositorio remoto

Clase 28

git remote add <nombre_del_remoto> <url_del_remoto> // Comando para adicionar nuevo repositorio remoto.
git remote upstream https://github.com/freddier/hyperblog // Ejemplo comando anterior.
git pull <remoto> <rama> // Comando para hacer pull a una rama especifica.
git pull upstream master // Ejemplo de comando anterior.

Clase 35 

Git stash // Comando para guardar en un stagin temporal.
Git stash list // comando para revisar los estados temporales guardados.
Git stash pop // comando para retomar el cambio en la rama.
git stash branch {rama} // comando para asignar a una rama 

Clase 36

git clean --dry-run // simula la eliminacion de archivos.
git clean -f // comando para limpiar el proyecto.

clase 37

git cherry-pick {hash} // comando para importan un comint antiguo de otra rama.

clase 38.
git commit --amend //comando para agregar lso cambios al comit anterior.

clase 39.
git refloj // comando para mirar TODO el historial.
git reset  --SOFT // comando que resetea cambios anteriores. 
git reset  --HARD // comando que resetea cambios anteriores.

clase 40.

git grep {palabra} // comando para buscar palabras
git grep -n {palabra} // comando para buscar la palabra e identificar la linea.
git grep -c {palabra} // comando para contar las palabras usadas.
git log -S {palabra} // coamndo para buscar palabras en los commits.

clase 41.

git shortlog -sn // muestra cuantos commit han hecho cada miembros del equipo.
git shortlog -sn --all // muestra cuantos commit han hecho cada miembros del equipo hasta los que han sido eliminado
git shortlog -sn --all --no-merge // muestra cuantos commit han hecho cada miembros quitando los eliminados sin los merges
git blame ARCHIVO // muestra quien hizo cada cosa linea por linea
git COMANDO --help // muestra como funciona el comando.
git blame ARCHIVO -Llinea_inicial,linea_final // muestra quien hizo cada cosa linea por linea indicándole desde que linea ver ejemplo -L35,50
**git branch -r **// se muestran todas las ramas remotas
git branch -a // se muestran todas las ramas tanto locales como remotas

