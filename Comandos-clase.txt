git init // comando para iniciar un proyecto
git config--list // Comando para validar la configuracion del entorno
git config --global user.name "Nombre" // Comando para configurar el nombre del usuario 
git config --global user.mail "correo@electronico" // Comando para configurar el correo electronico
git status // Comando para revisar los cambios en los archivos
git add {archivo} // comando para adjuntar un archivo al area temporal stagin
git add . // comando para adjuntar varios archivos
git commit -m "comentario" //Comando para enviar el cambio al repositorio .git -m para agregar comentario
git log {archivo} //Comando para revisar las versiones del archivo
git show // muestra los cambios que han existido sobre un archivo
git diff {sha commit1} {sha commit2} //Comando para validar la diferencia en tre versiones

Clase 12
git reset {sha commit2} --hard // regresa al estado seleccionado en el sha sin retorno 
git log --stat // visualiza los cambios realizados en cada comit desde la opcion de log.
git checkout {sha commit} {nombre archivo} // comando para regresar en la linea de tiempo a la version del archivo.
git checkout {master} {nombre archivo} // comando para devolver el cambio anterior a la version ultima master

Clase 13
git rm // permite eliminar arhchivos de git sin eliminar el historial del sistema de versiones.
git rm --cached: // Elimina los archivos del área de Staging y del próximo commit pero los mantiene en nuestro disco duro.
git rm --force: //Elimina los archivos de Git y del disco duro.
git reset // volvemos al pasado sin la posibilidad de volver al futuro. Borramos la historia y la debemos sobreescribir. No hay vuelta atrás.
git reset --hard // borra toda la información que tengamos en el área de staging (y perdiendo todo para siempre).
git reset --soft // mantiene allí los archivos del área de staging para que podamos aplicar nuestros últimos cambios pero desde un commit anterior.
git reset HEAD // mueve los cambios de Staging a Unstaged. Seguiremos teniendo los últimos cambios del archivo, el repositorio mantendrá el archivo.

Clase 14.
git clone url / comando para clonar un repositorio dede un servidor remoto cuando se trabaja con equipos.
git push / comando para enviar al repositorio remoto.
git fetch / comando para descargar un repositorio remoto a uno local
git merge / permite fusionar la informacion del repositorio local con el directorio de trabajo.
git pull / comando que une las funcioes de (fetch y merge) clona el repositorio remoto en local y directorio de trabajo.

clase 15.
Ramas / Permiten hacer cambios sin afectar los flujos de cambio.
master / rama princiapal normalnete es produccion.
git status / comando para ver donde estamos ubicados.
git branch {nombre rama} // comando para crecar una rama   
git checkout (nombre ramma) // comando que permite movernos entre ramas creadas.

Clae 16
git branch / comando para validar la cantidad de ramas que podemos tener.
git merge {rama} / comando para fusionar las ramas, nos ubicamos en la rama que debe contener el cambio e invocamos la rama que tiene los nuevos cambios.

Clase 20 
git config -l // comando que nos permite ver como esta configurado git.
ssh-keygen -t rsa -b 4096 -C "oscargiovanni@gmail.com" // Comando para crear una llave publica y privada.  
eval $(ssh-agent -s) // comando para identificar que esta corriendo el servidor de ssh.
ssh-add ruta-donde-guardaste-tu-llave-privada // comando para añadir la llave privada al servidor ssh.
git remote set-url origin url-ssh-del-repositorio-en-github // Comando para actualizar la URL que guardamos en nuestro repositorio remoto, ahora usamos la URL con SSH:
